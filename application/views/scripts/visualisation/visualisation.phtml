<!DOCTYPE html>
<html>
<style>

body {
  font: 10px sans-serif;
}

.chart { 
  background: #fff;
}

p {
  font: 12px helvetica;
}


.axis path, .axis line {
  fill: none;
  stroke: #000;
  stroke-width: 2px;
  shape-rendering: crispEdges;
}

button {
  position: absolute;
  right: 50px;
  top: 10px;
}

</style>
<head>
  <meta charset="utf-8">
  <title><?php echo $this->titre;?></title>
  <!-- <script src="../js/d3.v2.min.js"></script> -->
  <script src="../js/date_fns.min.js"></script>
  <script src="../js/d3.v4.min.js"></script>
  <script src="../js/d3-scale-chromatic.v1.min.js"></script>  
  <script src="../js/d3-legend.min.js"></script>  
  <script src="../js/jquery.min.js"></script>
  <script src="../js/w2ui.js"></script>
  <link rel="stylesheet" type="text/css" href="../css/w2ui-dark.css" />
      
  <style>
    body { margin:0 auto;}
    h1,h2,p {
      margin:0px;
    }
    svg {
	  margin-left:auto; margin-right:auto; display:block;
    }
    
    .axis {
	  font: 10px sans-serif;
		}
    
    .axis path,
	  .axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}
    .tooltip {
	  position: absolute;
	  width: 300px;
	  height: 35px;
	  pointer-events: none;
	}
    
  </style>
</head>

<body>
  <!-- <p>Résultat :<br></p>
  <?php echo $this->resultJSON;?>
  <br>
  <br>
  <?php echo $this->dateJSON;?>
  <br>
  <br>
  <?php echo $this->emotionsJSON;?>
  <br>
  <br>
  <?php echo $this->message;?> -->

  <div id='titresViz'>
	  <h1 align="center"><?php echo $this->titre;?></h1>
	  <h2 align="center"><?php echo $this->soustitre;?></h2>
	  <p align="center" id="major">-</p>
  </div>
  <p align="center" id="viz">-</p>
  <div class="chart">
</div>

  <script>
var refData=[],refKey=[],refTag=[],legData={colors:[],labels:[]}, nbTotal=0, refTotal=[];
  	function tempsToDate(temps, type) {
	  	var dRef, arrTemps = temps.split('-')
	  	formatTemps = arrTemps.length;
	  	if(arrTemps.length==3){
			//vérifie la présence d'heure
			var arrTemps2 = arrTemps[2].split(' ');
			if(arrTemps2.length==1) dRef = [arrTemps[0], parseInt(arrTemps[1])-1, arrTemps[2], 0, 0, 0];
			else{
				var arrTemps3 = arrTemps2[1].split(':');
				formatTemps += arrTemps3.length;				
        			if(arrTemps3.length==1) dRef = [arrTemps[0], parseInt(arrTemps[1])-1, arrTemps2[0], arrTemps2[1], 0, 0];
        			if(arrTemps3.length==2) dRef = [arrTemps[0], parseInt(arrTemps[1])-1, arrTemps2[0], arrTemps3[0], arrTemps3[1], 0];		  	 
        			if(arrTemps3.length==3) dRef = [arrTemps[0], parseInt(arrTemps[1])-1, arrTemps2[0], arrTemps3[0], arrTemps3[1], arrTemps3[2]];		  	 
			}
		}
	  	if(arrTemps.length==2) dRef = [arrTemps[0], parseInt(arrTemps[1])-1, 1, 0, 0, 0];
		if(arrTemps.length==1) dRef = [arrTemps[0], 0, 1, 0, 0, 0];
		if(type=="utc") return Date.UTC(dRef[0], dRef[1], dRef[2], dRef[3], dRef[4], dRef[5]);
		else return new Date(dRef[0], dRef[1], dRef[2], dRef[3], dRef[4], dRef[5]);	
	}


	var keys = <?php echo $this->emotionsJSON;?>;
  var datearray = [];
  var parse = d3.timeParse("%Y-%m-%d %H:%M:%S");
  var data = <?php echo $this->resultJSON;?>;
  data.forEach(function(d){
    d.key = d.key;
    d.value = +d.value;
    d.date = parse(d.date);
  });

	  refTotal['total']=0;
	  data.forEach(function(dt){
		  //transforme le temps en date
		  var dRef = dt.date;		  
		  var k = dt.key+'-'+dRef;		  
		  refData[k] = dt;
		  //cumul les clefs
		  if(refKey.indexOf(dt.key)<0)refKey.push(dt.key);
		  //cumul les dates
		  if(!refTotal[dt.temps]){			  
			  refTotal[dt.temps]=Math.trunc(dt.value);
		  }else{
			  refTotal[dt.temps] += Math.trunc(dt.value);
		  }
		  refTotal['total'] += Math.trunc(dt.value);
		  
		  //cumul les tags
		  if(!refTag[dt.key]){			  
			  refTag[dt.key]={"type":dt.type,"desc":dt.desc,"value":Math.trunc(dt.value)};
		  }else{
			  refTag[dt.key].value += Math.trunc(dt.value);
		  }
		  
	  });
	  //création des couleurs et du tableau de la légende	  
	  var sc = d3.scaleLinear().range([0, 1]).domain([0, refKey.length+1]);
	  refKey.forEach(function(r,i){
		  //var numColor = stringToBinary(dt.type);
		  //numColor = 1/(numColor)*1000;
		  //var numColor = 1/(refKey.length+1);	  
		  nbTotal += refTag[r].value;
		  var numColor = sc(i);	  
		  refTag[r].color=d3.color(numColor);
		  legData.colors.push(refTag[r].color);		  
		  legData.labels.push(refTag[r].type);		  
		  //legData.labels.push(refTag[r].type+' : '+refTag[r].value);		  
	  });

  var nested_data = d3.nest ()
        .key(function(d) {return d.date;})
        .entries(data);
  var mqpdata = nested_data.map(function(d){
    var obj = {
      utc: d.key,
      dt: d.key,	      
    }
    
    d.values.forEach(function(v){
      obj[v.key] = v.value;
      obj.k = v.key+'-'+obj.utc;		  	      
      //console.log(d.value)
    })
    
    return obj;
  })
  var data = mqpdata;var stack = d3.stack()
	    .keys(keys)
	    .order(d3.stackOrderNone)
	    .offset(d3.stackOffsetWiggle);
	
	var series = stack(data);
	var divTitreHeight = document.getElementById('titresViz').clientHeight;	
	var margin = {top: 20, right: 30, bottom: 30, left: 30};
	var width = window.innerWidth - margin.left - margin.right;
	var height = window.innerHeight - margin.top - margin.bottom - divTitreHeight;
	var extData = d3.extent(data, function(d){ 
		return new Date(d.utc); 
		});
	var y = d3.scaleTime()
	    .domain([extData[1],extData[0]])
	    .range([margin.top, height-margin.bottom]);	
	  
	var x = d3.scaleLinear()
	    .domain([0, d3.max(series, function(layer) { return d3.max(layer, function(d){ return d[0] + d[1];}); })])
	    .range([width/2, margin.left+margin.right]);
	console.log(x.domain());

	// setup axis
	var yAxis = d3.axisLeft(y);
	var xAxis = d3.axisBottom(x);
	
	
	var area = d3.area()
		.y(function(d) { 
			//console.info('in area function', d); 
      var yTest =y(new Date(d.data.utc));
			return yTest; 
			})
		.x0(function(d) { 
			var xTest = x(d[0]);
			return xTest; 
			})
		.x1(function(d) { 
			var xTest = x(d[1]);
			return xTest; 
			})
		.curve(d3.curveBasis);
	
	
	  var tooltip = d3.select("body").append("div")
		.attr("class", "tooltip");
	  
	var svg = d3.select("#viz").append("svg")
	    .attr("id", "svgGlobal")
	    .attr("width", width)
	    .attr("height", height);
	
	svg.selectAll("path")
	    .data(series)
	    .enter().append("path")
	    .attr("d", area)
	    .style("fill", function(d) { 
		    return refTag[d.key].color; 
		    //return color(Math.random()); 
		    })	    
	    .on('mouseover', function(d){
	    		colorInit = d3.select(this).style("fill");      
		    d3.select(this).style('fill',d3.rgb(colorInit).brighter());
			d3.select("#major").text(refTag[d.key].type);
			tooltip.transition()
               .duration(700)
               .style("opacity", 1);
	    })
	    .on('mousemove', function(d){      
			//console.log(d);
			//récupère les datas liés à la position de la souris
		    	var mouse = d3.mouse(this);		    		
		    	var dRef = dateToTemps(y.invert(mouse[1]));	    
			var k = d.key+'-'+dRef;
			var dt = refData[k];
			//récupère les datas liés au path
			//dt = refData[d[d.index].data.k];
			var pcRef = Math.trunc(dt.value)/refTotal[dt.temps]*100;	    	
			var pcTot = refTag[d.key].value/refTotal['total']*100;	    	
			tooltip.html(refTag[d.key].type+"<br/>"
						+"Total = "+refTag[d.key].value+" = "+pcTot.toFixed(2)+" %<br/>"
						+dt.temps+" = "+Math.trunc(dt.value)+" = "+pcRef.toFixed(2)+" %<br/>")
	               .style("left", (d3.event.pageX + 5) + "px")
	               .style("top", (d3.event.pageY - 28) + "px");
	    })
	    .on('mouseout', function(d){      
	      	d3.select(this).style('fill',d3.rgb(colorInit));
	      	d3.select("#major").text("-");
			tooltip.transition()
	               .duration(500)
	               .style("opacity", 0);
		})
	//construction de l'axe y
	svg.append("g")
            .attr("class", "axis axis--y")
            .attr("transform", "translate(" + 100 + "," + 0 + ")")
            .call(yAxis);  

  </script>
</body>
</html>